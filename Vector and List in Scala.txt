package com.org.second.poc
import scala.collection.immutable._
import scala.collection.immutable.SortedSet
import scala.collection.immutable.HashSet

//Scala vector
//Vector is a general-purpose, immutable data structure. It provides random access of elements. It is good for large collection of elements.
//It extends an abstract class AbstractSeq and IndexedSeq trait.

/*object CollectionMain {
  //Main Method
  def main(args: Array[String]): Unit = {
    var vector:Vector[Int] = Vector(5,8,3,6,9,4)
    var vector2 = Vector(5,2,6,3)
    var vector3 = Vector.empty
    println(vector)
    println(vector2)
    println(vector3)
  }
}*/
//Vector example
/*object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    var vector = Vector("Hockey","Cricket","Golf")
    var vector2 = Vector("Swimming")
    println("Vector Elements:")
    vector.foreach((element:String)=> println(element+""))
    //Adding a new element
    var newVector = vector:+"Racing"
    println("Vector Elements after adding")
    newVector.foreach((element:String)=>println(element+""))
    var mergeTwoVector = newVector++vector2
    println("Vector Elements after merging:")
    mergeTwoVector.foreach((element:String)=>println(element+""))
    //Reversing vector element
    var reverse = mergeTwoVector.reverse
    println("Vector Elements after reversing:")
    reverse.foreach((element:String)=> println(element+""))
    //Sorting vector
    var sortevector = mergeTwoVector.sorted
    println("Vector Elements after sorting:")
    sortevector.foreach((element:String)=>println(element+""))

  }
}*/
//Scala List
//List is used to store ordered elements. It extends LinearSeq trait. It is a class for immutable linked lists. This class is good for last-in-first-out (LIFO), stack-like access patterns.
//It maintains order of elements and can contain duplicates elements also.
/*object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    var list = List(1,8,5,6,9,45,15,4,7,7)
    var list2:List[Int] = List(1,8,5,6,9,99,6,100)
    println(list)
    println(list2)
  }
  }*/
//List Predefined Methods
/*object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    var list = List(1,8,5,6,9,58,23,15,4)
    var list2 = List(88,100)
    println("Elements:")
    list.foreach((element:Int)=>println(element+""))
    //Accessing element of 2 index
    println("Element of 2 index:"+list(2))
    //Merging two list
    var list3 = list++list2
    println("Element after merging list and list2")
    list3.foreach((elemnt:Int)=>println(elemnt+""))
    //Sorting list
    var list4 = list3.sorted
    println("Element after sorting list3:")
    list4.foreach((element:Int)=>println(element+""))
    //Reverse the List
    var list5 = list4.reverse
    println("Element after reverse list4")
    list5.foreach((element:Int)=>println(element+""))
  }
}*/
//Example of two dimensional list
/*object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    //Creating a two-dimensional list
    val twodlist: List[List[Int]]=
      List(
        List(1,0,0),
        List(0,1,0),
        List(0,0,1)
      )
    println("The two dimensional list is:")
    println(twodlist)
  }
}*/
//Basic Operating on Lists
//1. Head:- The first element of a list returned by head method

/*object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    //Creating a List
    val mylist = List("C","C#","Java","Scala","PHP","Ruby")
    println("The head of the list is:")
    println(mylist.head)
    println(mylist.tail)
  }
}*/

//Uniform list in scala
//Uniform List can be created in Scala using List.fill() method. List.fill() method creates a list and fills it with zero or more copies of an element.
object CollectionMain{
  //Main Method
  def main(args: Array[String]): Unit = {
    //Repeats Scala three times
    val programmingLangauge = List.fill(3)("Scala")
    println("Programming Language:"+ programmingLangauge)
    //Repeats 2,10 times
    val number = List.fill(8)(4)
    println("number:"+number)
  }
}